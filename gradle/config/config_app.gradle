apply {
    plugin "com.android.application"
    plugin "kotlin-android"
    plugin "kotlin-android-extensions"
    plugin "kotlin-kapt"
    plugin "com.alibaba.arouter"
}

apply {
    from "${rootDir.path}/gradle/config/util.gradle"
}

configSigning project
configApkName project

android {
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }

    compileSdkVersion rootProject.ext.android.compileSdkVersion

    splits { // [优化ApK大小之ABI Filters 和 APK split](https://www.jianshu.com/p/76db8b87fac3)
        // Configures multiple APKs based on ABI.
        abi {
            def isReleaseBuild = false
            gradle.startParameter.taskNames.find {
                if (it ==~ /assemble.*Release/) {
                    isReleaseBuild = true
                    return true
                }
                return false
            }
            // Enables building multiple APKs per ABI.
            enable isReleaseBuild
            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.
            reset()
            // Specifies a list of ABIs that Gradle should create APKs for.
            include 'armeabi-v7a', 'arm64-v8a'
            // Specifies that we want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        applicationId rootProject.ext.applicationId
        applicationIdSuffix appIdSuffix()
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        multiDexEnabled true
        resValue "string", "app_name", rootProject.appName + appIdSuffix()

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // splits中配置后，这里不能再配置
//        ndk {
//            abiFilters 'armeabi-v7a', 'arm64-v8a'
//        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        manifestPlaceholders = [
                "APP_NAME"                  : "${rootProject.appName}",
                "APP_CODE"                  : "${rootProject.appCode}",
        ]
    }

    buildTypes {
        debug {
            def debugAble = equalLocalValue(project, 'DEBUG_ABLE', 'true')
            versionNameSuffix "-debug"
            minifyEnabled !debugAble
            zipAlignEnabled !debugAble
            shrinkResources !debugAble
            applicationIdSuffix appIdSuffix()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.releaseConfig
            buildConfigField "boolean", "DEBUG_ABLE", debugAble.toString()
        }

        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            applicationIdSuffix appIdSuffix()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.releaseConfig
            buildConfigField "boolean", "DEBUG_ABLE", "false"
        }
    }

    sourceSets {
        main {
//            manifest.srcFile 'src/main/AndroidManifest.xml'
//            java.srcDirs = ['src/main/java']
//            resources.srcDirs = ['src/main/resources']
//            res.srcDirs = ['src/main/res']
//            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDirs = ['libs']
        }
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false    // flutter release模式下打包失败
        checkDependencies true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
    }

    // It will be removed in version 8.0 of the Android Gradle plugin
//    dexOptions {
//        jumboMode true
//        javaMaxHeapSize "4g"
//    }

    buildFeatures {
        dataBinding true
    }
}

dependencies {
    testImplementation rootProject.ext.dep.junit
//    testImplementation rootProject.ext.dep.mockito
//    testImplementation rootProject.ext.dep.robolectric
    androidTestImplementation rootProject.ext.dep.androidx_runner
    androidTestImplementation rootProject.ext.dep.androidx_espressocore
    androidTestImplementation rootProject.ext.dep.androidx_junit

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    // LeakCanary LeakCanary升级到2.x之后，只需在build.gradle中添加一个依赖就行，代码中无需嵌入
    debugImplementation dep.leakcanary.android

    kapt rootProject.ext.dep.arouter_compiler
    api rootProject.ext.dep.arouter_api
}

private String appIdSuffix() {
    def result = ""
    if (project.hasProperty('appIdSuffix')) {
        result = project.appIdSuffix
    }
    return result
}

def configSigning(Project pro) {

    File signPropertiesFile = file("${rootDir.path}/gradle/config/sign/keystore.properties")
    if (!signPropertiesFile.exists()) return

    println "$pro.name config sign start..."
    pro.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile new File(signPropertiesFile.getParent(), properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
        buildTypes.debug.signingConfig signingConfigs.release
    }
    println "$pro.name config sign end..."
}

def configApkName(Project pro) {
    pro.android.applicationVariants.all { variant ->
//        if (variant.buildType.name != "debug") {
            // Android Studio 3.3
//            variant.getPackageApplicationProvider().get().outputDirectory = new File("${rootDir.path}/apk")
            variant.outputs.all { output ->
//                outputFileName = rootProject.name + "_" + variant.versionName.replace(".", "_") + ".apk"
                outputFileName = "app-" + variant.buildType.name + ".apk"
            }
//        }
    }
}