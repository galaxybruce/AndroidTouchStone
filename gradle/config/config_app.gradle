apply {
    plugin "com.android.application"
    plugin "kotlin-android"
    plugin "kotlin-android-extensions"
}

apply {
    from "${rootDir.path}/gradle/config/util.gradle"
}

configSigning project
configApkName project

android {
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        applicationId rootProject.applicationId
        applicationIdSuffix appIdSuffix()
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        multiDexEnabled true
        resValue "string", "app_name", rootProject.appName + appIdSuffix()

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

        manifestPlaceholders = [
                "APP_NAME"                  : "${rootProject.appName}",
                "APP_CODE"                  : "${rootProject.appCode}",
        ]
    }

    buildTypes {
        debug {
            def debugAble = equalLocalValue(project, 'DEBUG_ABLE', 'true')
            versionNameSuffix "-debug"
            minifyEnabled !debugAble
            zipAlignEnabled !debugAble
            shrinkResources !debugAble
            applicationIdSuffix appIdSuffix()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.releaseConfig
            buildConfigField "boolean", "DEBUG_ABLE", debugAble.toString()
        }

        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            applicationIdSuffix appIdSuffix()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.releaseConfig
            buildConfigField "boolean", "DEBUG_ABLE", "false"
        }
    }

    sourceSets {
        main {
//            manifest.srcFile 'src/main/AndroidManifest.xml'
//            java.srcDirs = ['src/main/java']
//            resources.srcDirs = ['src/main/resources']
//            res.srcDirs = ['src/main/res']
//            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDirs = ['libs']
        }
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false    // flutter release模式下打包失败
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
    }

    dexOptions {
        jumboMode true
        javaMaxHeapSize "4g"
    }

    buildFeatures {
        dataBinding true
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')

    testImplementation rootProject.ext.dep["junit"]
    androidTestImplementation rootProject.ext.dep["runner"]
    androidTestImplementation rootProject.ext.dep.espressocore

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'

    // LeakCanary LeakCanary升级到2.x之后，只需在build.gradle中添加一个依赖就行，代码中无需嵌入
    debugImplementation dep.leakcanary.android
}

private String appIdSuffix() {
    def result = ""
    if (project.hasProperty('appIdSuffix')) {
        result = project.appIdSuffix
    }
    return result
}

def configSigning(Project pro) {

    File signPropertiesFile = file("${rootDir.path}/sign/keystore.properties")
    if (!signPropertiesFile.exists()) return

    println "$pro.name config sign start..."
    pro.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile new File(signPropertiesFile.getParent(), properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
        buildTypes.debug.signingConfig signingConfigs.release
    }
    println "$pro.name config sign end..."
}

def configApkName(Project pro) {
    pro.android.applicationVariants.all { variant ->
//        if (variant.buildType.name != "debug") {
            // Android Studio 3.3
            variant.getPackageApplicationProvider().get().outputDirectory = new File("${rootDir.path}/apk")
            variant.outputs.all { output ->
                outputFileName = rootProject.name +
                        "_" + variant.versionName.replace(".", "_") +
                        ".apk"
            }
//        }
    }
}